package sqlc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _sqlc_tmpl_fields_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\x38\x18\x45\x20\x07\x8a\x12\x6c\x45\x1f\x0c\xe4\xc1\x69\x9c\xd5\x83\xeb\x04\xb1\xb2\x60\x18\x86\x81\x91\x29\x97\x9b\x2a\x79\x12\x9d\x25\x30\xf4\xdd\xc7\x23\x29\x99\x94\x28\xc7\xde\xb0\x62\x79\xa8\xa5\xe3\xfd\xf9\xdd\xef\xee\x48\xaa\xe7\xe7\x10\x7d\x9a\x2e\xe0\x66\x3a\x9b\xc0\xe3\x78\x01\xe3\x87\xe8\xf6\x87\xc9\x7c\x72\x3f\x8e\x26\xd7\x70\x06\xe3\xf9\xcf\x30\xb9\x9e\x46\x0b\x88\x6e\x95\xea\xe3\x74\x36\x83\xab\x09\xcc\x6e\x17\x11\x3c\x7e\x9a\xcc\x61\x1a\x81\x90\xdf\x4f\x1a\x3b\xcf\xdb\x6e\xe1\xdd\xba\xa0\xcb\x12\x46\x97\x10\xe2\x13\x8b\x09\xa7\x25\x54\x95\x5c\x4b\x36\x59\xac\xd6\xf0\x89\xb3\x3c\x93\x4b\xde\x9a\xc4\x7f\x90\x15\x85\xf2\xcf\x34\xf6\x3c\xf6\x75\x9d\x17\x1c\x7c\x0f\x60\xb0\x24\x9c\x3c\x91\x92\x9e\x8b\xa5\x01\x0a\x0a\x9a\xa4\x34\xe6\xf2\x99\xb3\xaf\x74\xe0\x0d\x3d\xef\x99\x14\x52\x9d\xbf\xae\xe9\x55\x9e\xa7\x70\x09\x5a\x2f\x8c\x84\xe8\x36\xf1\x13\x92\x96\x74\xa8\x55\xae\x05\xa6\xae\x0a\x7a\x0b\x1f\x32\xf6\xe2\x5f\x04\x70\x31\x34\x95\x71\xe9\x60\x83\x9b\x34\x27\xfc\xfb\xef\x1c\x18\xd4\x82\x7f\x11\xda\xba\x1f\xde\xf7\xe8\x7e\x78\x6f\xea\x4e\x33\xde\xd5\x63\x19\xf7\x77\xa1\xaf\xd2\xfc\xa9\xab\xf3\xcb\xaf\x4f\xaf\x9c\x6e\x2b\xc3\x91\x2b\x24\xcb\x64\xc0\xc6\xd9\x7c\x93\xa6\x6e\x32\x45\x2d\xc2\x7a\x75\xe7\x16\x25\x6e\x66\x71\x85\x3c\xa5\x92\xca\xae\xbe\x9b\x5c\xd3\x06\x35\x6c\xbb\x5e\x8e\x6b\x68\x9a\x58\x87\x95\x2b\xf5\xbd\x56\x6e\x52\x6b\x7c\xb8\x6a\xeb\x3b\xeb\x54\x47\x90\xdc\x77\xf4\xf7\x61\x72\x58\x2c\x78\xc1\xb2\x55\xbf\x89\x5a\xb7\x6d\xa2\xbd\x2c\x47\x16\xc3\x7d\xfe\x07\x83\x5a\xc3\xed\xad\x33\x10\x62\x34\x51\x1b\xa6\x59\x49\x0b\xbe\xa0\x7c\xc1\xe9\x1a\x44\xa3\xd1\x22\x21\x31\x85\xad\x70\x27\xa4\x7e\x84\x18\x6e\x18\x4d\x97\xc1\x6e\x55\xe0\xd9\x19\x7e\xce\x0b\x8a\xc6\xc2\x40\x6c\x24\x05\xc9\xc4\x6e\xf1\xee\xb7\x00\xde\x71\xb9\x9d\x60\x14\xb9\x95\x48\x7f\xb8\xd5\xf0\xf0\x4e\xa0\x63\x2f\x42\xe8\xb7\xde\x75\x20\x25\x9d\x31\x11\x8e\xa4\x42\xdc\x1b\x8d\x66\x4b\x74\x5d\xe9\x64\x1e\xd6\x62\x53\xa2\xff\x20\x99\xc6\xf0\x9b\x24\xd3\x13\x6d\x97\xcc\xde\xd0\xb8\x3f\x83\xcf\xe0\x94\x49\x4e\x86\x2e\x24\x09\xb8\xb1\x3c\x1f\x42\xad\xa4\xab\xa0\x7c\x53\x64\xc0\x42\xe4\x2d\x11\x96\x43\x4f\x1e\x14\x1a\xe4\x21\x10\x37\x70\xba\x91\x99\xfe\x6b\x88\x1d\xc2\x4c\x88\x9b\x3e\x88\xe7\xf8\xa7\x3b\xe3\x5e\x8d\x03\xd6\xdf\xea\x8b\x37\x8a\xec\x82\xe8\x67\x44\x4c\x58\x29\x07\x71\xe8\xd4\xf0\xba\x9d\x79\xa3\x0f\x55\x91\x50\x7f\xf8\x04\xc3\xeb\x93\xb8\x09\x9f\x84\x73\x8c\xa7\xda\xab\x64\xab\x8c\x25\x8c\x16\xa8\x8c\xcc\x38\xe2\x1d\x50\x99\x12\x4e\x4b\x8a\x7c\x08\x44\xee\x14\xde\x4e\xd2\x2c\xc1\x89\x50\xe0\xf9\x2c\xff\x0b\x81\xb5\x15\xb7\xe8\x6a\x04\xf8\x2f\xe2\x53\x08\x38\xc8\x5a\x7c\xcb\xe0\x01\x34\x39\x8f\x80\x57\xce\x5e\xd9\xcb\x9d\xaa\xe4\xbe\x68\x88\x79\x13\x73\x89\xce\xc8\x41\xbc\x35\xa1\xc5\x28\xd4\x8d\x28\xc4\x24\x65\xa4\xdc\x69\x09\x6e\x54\x45\xeb\x76\xf1\x8c\xa8\xdd\x68\xf6\x06\xb7\xdb\xdc\x3a\x9b\xd7\x5a\x36\x96\xba\xfe\x35\x8d\xb5\x0e\xad\x50\xd8\x61\xcf\x24\xdd\x50\xc7\xfc\x7d\xcc\xb3\x25\x93\x78\x6a\xd3\x1f\x73\x96\xf5\x59\xda\x28\x87\x80\xba\x2d\x0f\xbb\x6e\x55\xed\x10\xc3\xe9\x3e\x5e\x87\xcd\xfc\xf8\x43\x9b\x20\xb3\x11\xac\x05\x94\x03\xcc\x65\xf5\x21\xc6\x4b\xad\x9c\xa3\x40\x8a\x27\x2f\xeb\xa2\x11\xe3\x8b\x12\x8f\x8b\x55\xd9\x88\xf1\x45\x89\x3f\x7e\x61\xe9\x72\xa4\xc5\xf2\x05\xe5\xc7\xa0\x4f\x62\xb1\x41\x6d\xb2\x00\xa8\x88\xa5\xcb\x1d\x00\x11\x11\x20\x0c\x43\xeb\x24\xda\xb5\x37\x4b\xe0\x44\xc6\x84\xcb\x4b\xc8\x58\x0a\x2a\xa5\x83\xba\x5e\x6a\xaa\x1e\x1c\xa9\xc7\x38\xcc\x9a\xf4\xc1\x9c\x84\x38\x6c\x5e\xea\x55\x11\x53\x5b\xb5\x38\x95\x74\xca\x44\x24\x83\x98\x4d\xa0\x59\xc3\x64\x2a\xe5\x00\x1b\xac\x02\x2a\x6e\xf5\xff\x03\xc8\x7a\xbd\x69\x05\x44\xdf\xc8\x74\x1f\xd0\xa6\x03\x8c\x2e\x20\x4d\xfd\x8d\x1e\x38\xe9\x71\xde\xdb\x69\x56\x9c\x76\xbf\x59\xf1\xda\x5d\x67\xc5\x6d\xf5\x9e\xfa\xab\xea\x47\x93\xf7\x23\xba\x72\x5c\xfa\xe6\xfe\x63\xf6\xde\xe1\x15\x53\xf5\x32\x4b\xb5\xaf\x50\x32\xde\x48\xfd\x28\x89\x2c\x9c\x93\xd5\x5e\x46\x7b\xd9\xec\x65\xb2\x8f\xc5\xea\xd8\x41\x1e\x23\x70\xb1\x07\x29\xc6\x4c\xaa\xe2\x50\x26\x75\x84\xaf\xcf\xe4\xf5\x89\x3a\x1c\x8a\xb9\xd7\xce\x70\xf0\x07\x03\x7b\x88\x14\xd3\x3d\x13\x56\x83\x38\x2e\x29\xe4\xb6\x27\x27\x19\xeb\x70\x4f\xf8\xb1\x21\x3c\x99\xdf\x1e\xa6\x3f\x3c\xc9\x5a\x47\xc4\x11\xce\xef\x48\x41\xc5\x27\xf5\xd0\x38\x41\x6d\xb0\x4d\xaf\x79\xf2\x40\x87\xb3\xb3\xf6\x81\xde\x3a\x07\x0f\x8d\xdc\x73\x5a\xa2\x9f\x7d\x87\xa5\x89\xae\x11\x6e\xaf\x98\x78\xca\x56\xba\xe9\xf5\xdb\xf6\x27\x3c\x3f\x47\x80\x2e\x03\xb5\x22\xda\xb5\x0a\xe0\xae\xfe\x8f\x9a\x91\x46\xd1\x08\x44\xac\x63\xd8\x73\x1f\xdb\x46\x0a\x7b\x4f\x6d\x33\x15\x6b\x61\x3b\xfb\x22\x46\x2e\x0e\xe0\x1e\x7f\x15\xfc\xb7\x31\x5b\x17\x2f\x59\x27\x99\x45\xfb\x13\xa1\x34\x4a\x1d\xc0\x7f\x7f\x29\x2c\x2b\xaf\xbe\x0a\x76\xee\x82\xad\xbb\xf9\x11\xac\x1f\x70\x81\xb7\xfb\x18\x6f\x0b\x03\xcb\x72\x10\x80\x16\xe0\x76\x87\x02\xf1\xc6\xb2\xdf\x11\xb8\xe1\xac\xf3\x85\xa6\x1f\xff\x0e\x00\x00\xff\xff\x14\x91\xb5\x2c\x54\x14\x00\x00")

func sqlc_tmpl_fields_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_sqlc_tmpl_fields_tmpl,
		"sqlc/tmpl/fields.tmpl",
	)
}

func sqlc_tmpl_fields_tmpl() (*asset, error) {
	bytes, err := sqlc_tmpl_fields_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sqlc/tmpl/fields.tmpl", size: 5204, mode: os.FileMode(420), modTime: time.Unix(1426715540, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlc_tmpl_schema_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5b\x6f\x9b\x30\x14\x7e\xe7\x57\x1c\xa1\x6a\x82\x29\x23\xef\x91\xf2\xc0\x54\xda\x22\x31\xb2\x15\xda\x6a\x9a\xa6\xca\x21\x26\x61\xe5\x36\x6c\xba\x45\x11\xff\x7d\xbe\x40\x42\x8a\x69\xd0\xfa\x50\x11\xfb\x9c\xef\x76\x6c\xcf\xe7\x10\xde\xb9\x01\xdc\xb8\x9e\x03\x4f\x76\x00\xf6\x43\xb8\xba\x75\x7c\xe7\xde\x0e\x9d\x6b\xf8\x04\xb6\xff\x1d\x9c\x6b\x37\x0c\x20\x5c\xc9\xd2\x27\xd7\xf3\xe0\xb3\x03\xde\x2a\x08\xe1\xe9\xce\xf1\xc1\x0d\x81\xad\xdf\x3b\xc7\x3e\x8d\xc1\xda\x21\x1c\x0e\x60\x7d\xad\x8a\x57\x9c\xa3\x3c\xc2\x56\x98\x64\x98\x50\x94\x95\xd0\x34\xf0\x10\xb8\xfe\x2d\x90\xdf\x69\x04\x8f\xce\x7d\xe0\xae\xfc\xb7\xe5\x8f\xb8\x22\x49\x91\xb3\x62\x4d\x63\x5b\x57\x74\x5f\x62\x02\x8b\x25\x58\xa1\xf8\xe2\xeb\x25\x8a\x5e\xd0\x16\xcb\xd6\xf6\x9b\xaf\x27\x59\x59\x54\x14\x0c\x0d\x40\xdf\x26\x74\x57\xaf\xad\xa8\xc8\xe6\x64\x57\x53\xfc\x6b\xce\x59\xc5\x3f\x9d\xef\x13\x5a\x25\xf9\x96\xe8\x9a\xa9\x69\x51\x91\x13\x0a\x41\xb4\xc3\x19\x82\x25\xe8\x1c\xb7\xfd\xd5\x34\xba\xd0\x51\xa1\x9c\x91\x5c\x3d\xcf\x98\x22\xa9\x06\xad\xd3\x56\x0e\x97\xc8\xb5\xd0\xc2\x2b\xfe\xe0\x8a\x55\x58\x3e\xca\xb8\x24\x60\x2c\x75\x44\xe1\xc0\x18\xcf\x41\x62\x0e\xc2\x0a\x6f\x12\x9c\x6e\x04\x0c\x48\x88\x87\xb2\xe4\x10\xf1\x09\x82\x29\xb6\x78\x12\xb1\x48\x80\x2d\x89\x1e\x59\x8f\xf3\x8d\xec\x45\x69\x82\x08\x48\x53\x1a\xd3\x14\xd7\x79\x04\x06\x85\x8f\x4a\x5d\x26\xb8\x24\xc0\x29\x8e\x28\x77\x61\x98\x70\x98\xd0\x22\x13\x61\xc5\x92\x45\x98\xaa\x30\xad\xab\xbc\xdd\x9a\xc2\xcb\x3f\x94\x10\xc2\xe6\xb7\x9a\xf9\x88\x13\xbc\x31\xa8\xd5\xd1\xcd\xc4\x3c\x86\x58\xba\x39\x85\xcf\x26\x06\x6a\xd9\x4c\xc9\x71\xf2\xdd\xa7\xff\xa0\xec\xe7\x05\x53\x26\x37\x32\xbb\x05\x50\x4b\xb9\x31\xeb\x7a\x8e\xf3\x6b\x27\xb8\x40\x7c\xab\x99\xe4\x8c\xd7\x2b\xa3\xa4\x96\xc0\x9a\x02\xf2\x05\xed\xd7\x58\x81\x94\xc4\x1d\x0a\x2c\xd9\x85\xd0\x41\x26\xd1\x12\x8c\x0c\x84\x2b\x07\x9c\x12\x7c\x5e\xdd\xc9\x69\x7d\xcd\xf9\xdf\xe0\x4e\xed\x65\xaa\xdd\x15\xbf\xa4\x5b\xbe\x0c\xec\xdd\xc0\x71\xf2\xb7\xbb\x12\x46\xce\xb7\xcf\x86\xad\xac\x1b\x1c\xbb\xb7\x55\x46\x7f\x68\x47\xd6\x59\x0b\x4d\xac\x50\xee\x09\x3e\x93\x1f\xc3\xd3\x24\x3b\x7b\x97\x0c\xc8\xd3\xc3\x42\xff\xf1\x53\x48\x18\x08\xeb\xaf\x4f\x3f\x86\xc3\xc7\x62\xcc\x8b\xae\x3c\x98\xba\x39\x3c\x9a\x62\x6a\x3d\x87\xef\xbf\x86\xaf\xa8\x82\xe7\x67\xf5\x6b\xb8\x1c\xbb\x66\xb2\x4d\xa9\x74\xb4\x89\x85\xa5\xfd\xe7\x9b\xba\x50\xe5\x34\x22\xfa\xbd\xa4\x7a\xa1\x9c\x45\xc4\xcd\x88\x44\xbc\xe4\x85\xa5\xb2\xec\x86\x79\x5c\x3b\x5c\x08\x11\xd4\x59\xf4\x19\x1b\xed\x5f\x00\x00\x00\xff\xff\xd4\xa6\xda\x3b\xc5\x07\x00\x00")

func sqlc_tmpl_schema_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_sqlc_tmpl_schema_tmpl,
		"sqlc/tmpl/schema.tmpl",
	)
}

func sqlc_tmpl_schema_tmpl() (*asset, error) {
	bytes, err := sqlc_tmpl_schema_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sqlc/tmpl/schema.tmpl", size: 1989, mode: os.FileMode(420), modTime: time.Unix(1425327956, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sqlc/tmpl/fields.tmpl": sqlc_tmpl_fields_tmpl,
	"sqlc/tmpl/schema.tmpl": sqlc_tmpl_schema_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sqlc": &_bintree_t{nil, map[string]*_bintree_t{
		"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
			"fields.tmpl": &_bintree_t{sqlc_tmpl_fields_tmpl, map[string]*_bintree_t{
			}},
			"schema.tmpl": &_bintree_t{sqlc_tmpl_schema_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

